/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface BatchPrecompileInterfaceInterface extends utils.Interface {
  functions: {
    "batchAll(address[],uint256[],bytes[],uint64[])": FunctionFragment;
    "batchSome(address[],uint256[],bytes[],uint64[])": FunctionFragment;
    "batchSomeUntilFailure(address[],uint256[],bytes[],uint64[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "batchAll" | "batchSome" | "batchSomeUntilFailure"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "batchAll",
    values: [string[], BigNumberish[], BytesLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchSome",
    values: [string[], BigNumberish[], BytesLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchSomeUntilFailure",
    values: [string[], BigNumberish[], BytesLike[], BigNumberish[]]
  ): string;

  decodeFunctionResult(functionFragment: "batchAll", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "batchSome", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "batchSomeUntilFailure",
    data: BytesLike
  ): Result;

  events: {
    "SubcallFailed(uint256)": EventFragment;
    "SubcallSucceeded(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "SubcallFailed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SubcallSucceeded"): EventFragment;
}

export interface SubcallFailedEventObject {
  index: BigNumber;
}
export type SubcallFailedEvent = TypedEvent<
  [BigNumber],
  SubcallFailedEventObject
>;

export type SubcallFailedEventFilter = TypedEventFilter<SubcallFailedEvent>;

export interface SubcallSucceededEventObject {
  index: BigNumber;
}
export type SubcallSucceededEvent = TypedEvent<
  [BigNumber],
  SubcallSucceededEventObject
>;

export type SubcallSucceededEventFilter =
  TypedEventFilter<SubcallSucceededEvent>;

export interface BatchPrecompileInterface extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BatchPrecompileInterfaceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    batchAll(
      to: string[],
      value: BigNumberish[],
      callData: BytesLike[],
      gasLimit: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    batchSome(
      to: string[],
      value: BigNumberish[],
      callData: BytesLike[],
      gasLimit: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    batchSomeUntilFailure(
      to: string[],
      value: BigNumberish[],
      callData: BytesLike[],
      gasLimit: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  batchAll(
    to: string[],
    value: BigNumberish[],
    callData: BytesLike[],
    gasLimit: BigNumberish[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  batchSome(
    to: string[],
    value: BigNumberish[],
    callData: BytesLike[],
    gasLimit: BigNumberish[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  batchSomeUntilFailure(
    to: string[],
    value: BigNumberish[],
    callData: BytesLike[],
    gasLimit: BigNumberish[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    batchAll(
      to: string[],
      value: BigNumberish[],
      callData: BytesLike[],
      gasLimit: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    batchSome(
      to: string[],
      value: BigNumberish[],
      callData: BytesLike[],
      gasLimit: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    batchSomeUntilFailure(
      to: string[],
      value: BigNumberish[],
      callData: BytesLike[],
      gasLimit: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "SubcallFailed(uint256)"(index?: null): SubcallFailedEventFilter;
    SubcallFailed(index?: null): SubcallFailedEventFilter;

    "SubcallSucceeded(uint256)"(index?: null): SubcallSucceededEventFilter;
    SubcallSucceeded(index?: null): SubcallSucceededEventFilter;
  };

  estimateGas: {
    batchAll(
      to: string[],
      value: BigNumberish[],
      callData: BytesLike[],
      gasLimit: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    batchSome(
      to: string[],
      value: BigNumberish[],
      callData: BytesLike[],
      gasLimit: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    batchSomeUntilFailure(
      to: string[],
      value: BigNumberish[],
      callData: BytesLike[],
      gasLimit: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    batchAll(
      to: string[],
      value: BigNumberish[],
      callData: BytesLike[],
      gasLimit: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    batchSome(
      to: string[],
      value: BigNumberish[],
      callData: BytesLike[],
      gasLimit: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    batchSomeUntilFailure(
      to: string[],
      value: BigNumberish[],
      callData: BytesLike[],
      gasLimit: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
